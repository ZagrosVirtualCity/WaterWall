

First , there is a full caputred client hello from my just updated chrome Version 138.0.7204.184 (Official Build) (64-bit)

Frame 7463: 1799 bytes on wire (14392 bits), 1799 bytes captured (14392 bits) on interface \Device\NPF_{6A460D48-FB76-6C3F-A47D-EF97D3DC6B0E}, id 0
Raw packet data
Internet Protocol Version 4, Src: 172.19.0.1, Dst: 213.239.246.73
Transmission Control Protocol, Src Port: 10016, Dst Port: 443, Seq: 1, Ack: 1, Len: 1759
Transport Layer Security
    TLSv1.3 Record Layer: Handshake Protocol: Client Hello
        Content Type: Handshake (22)
        Version: TLS 1.0 (0x0301)
        Length: 1754
        Handshake Protocol: Client Hello
            Handshake Type: Client Hello (1)
            Length: 1750
            Version: TLS 1.2 (0x0303)
            Random: f1d5bbe9d328c25dac235e24133c0045386235ee2843e920344eaee0f6b3d5aa
            Session ID Length: 32
            Session ID: 09fbc18569b1c6e236795f552117fdc9f959b77d131014b5e55c8e6a3af8384d
            Cipher Suites Length: 32
            Cipher Suites (16 suites)
                Cipher Suite: Reserved (GREASE) (0xfafa)
                Cipher Suite: TLS_AES_128_GCM_SHA256 (0x1301)
                Cipher Suite: TLS_AES_256_GCM_SHA384 (0x1302)
                Cipher Suite: TLS_CHACHA20_POLY1305_SHA256 (0x1303)
                Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 (0xc02b)
                Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 (0xc02f)
                Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 (0xc02c)
                Cipher Suite: TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (0xc030)
                Cipher Suite: TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 (0xcca9)
                Cipher Suite: TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 (0xcca8)
                Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA (0xc013)
                Cipher Suite: TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA (0xc014)
                Cipher Suite: TLS_RSA_WITH_AES_128_GCM_SHA256 (0x009c)
                Cipher Suite: TLS_RSA_WITH_AES_256_GCM_SHA384 (0x009d)
                Cipher Suite: TLS_RSA_WITH_AES_128_CBC_SHA (0x002f)
                Cipher Suite: TLS_RSA_WITH_AES_256_CBC_SHA (0x0035)
            Compression Methods Length: 1
            Compression Methods (1 method)
            Extensions Length: 1645
            Extension: Reserved (GREASE) (len=0)
            Extension: Unknown type 17613 (len=5)
            Extension: psk_key_exchange_modes (len=2)
            Extension: signature_algorithms (len=18)
            Extension: renegotiation_info (len=1)
            Extension: signed_certificate_timestamp (len=0)
            Extension: ec_point_formats (len=2)
            Extension: supported_groups (len=12)
            Extension: supported_versions (len=7) TLS 1.3, TLS 1.2
            Extension: extended_master_secret (len=0)
            Extension: key_share (len=1263) X25519MLKEM768, x25519
            Extension: status_request (len=5)
            Extension: server_name (len=22) name=api.hetzner.cloud
            Extension: encrypted_client_hello (len=218)
            Extension: application_layer_protocol_negotiation (len=14)
            Extension: compress_certificate (len=3)
            Extension: session_ticket (len=0)
            Extension: Reserved (GREASE) (len=1)
            [JA4: t13d1516h2_8daaf6152771_d8a2da3f94cd]
            [JA4_r: t13d1516h2_002f,0035,009c,009d,1301,1302,1303,c013,c014,c02b,c02c,c02f,c030,cca8,cca9_0005,000a,000b,000d,0012,0017,001b,0023,002b,002d,0033,44cd,fe0d,ff01_0403,0804,0401,0503,0805,0501,0806,0601]
            [JA3 Fullstring: 771,4865-4866-4867-49195-49199-49196-49200-52393-52392-49171-49172-156-157-47-53,17613-45-13-65281-18-11-10-43-23-51-5-0-65037-16-27-35,4588-29-23-24,0]
            [JA3: dc6fe71739bd54e712508280d20063ab]



comparing with curl impersonate latest chrome path:

Cipher Suite: Reserved (GREASE) (0xeaea)
Cipher Suite: TLS_AES_128_GCM_SHA256 (0x1301)                         TLS_AES_128_GCM_SHA256
Cipher Suite: TLS_AES_256_GCM_SHA384 (0x1302)                         TLS_AES_256_GCM_SHA384
Cipher Suite: TLS_CHACHA20_POLY1305_SHA256 (0x1303)                   TLS_CHACHA20_POLY1305_SHA256
Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 (0xc02b)        ECDHE-ECDSA-AES128-GCM-SHA256
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 (0xc02f)          ECDHE-RSA-AES128-GCM-SHA256     
Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 (0xc02c)        ECDHE-ECDSA-AES256-GCM-SHA384
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (0xc030)          ECDHE-RSA-AES256-GCM-SHA384
Cipher Suite: TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 (0xcca9)  ECDHE-ECDSA-CHACHA20-POLY1305
Cipher Suite: TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 (0xcca8)    ECDHE-RSA-CHACHA20-POLY1305
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA (0xc013)             ECDHE-RSA-AES128-SHA
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA (0xc014)             ECDHE-RSA-AES256-SHA
Cipher Suite: TLS_RSA_WITH_AES_128_GCM_SHA256 (0x009c)                AES128-GCM-SHA256
Cipher Suite: TLS_RSA_WITH_AES_256_GCM_SHA384 (0x009d)                AES256-GCM-SHA384
Cipher Suite: TLS_RSA_WITH_AES_128_CBC_SHA (0x002f)                   AES128-SHA
Cipher Suite: TLS_RSA_WITH_AES_256_CBC_SHA (0x0035)                   AES256-SHA 


notes for create.c:

i first corrected setting a harded ALPN 

 static const uint8_t alpn_protos[] = {
        2, 'h', '2',
        8, 'h','t','t','p','/','1','.','1'
    };

and then:

SSL_CTX_set_min_proto_version(ssl_ctx, TLS1_2_VERSION);
SSL_CTX_set_max_proto_version(ssl_ctx, TLS1_3_VERSION);

then grease:

SSL_CTX_set_grease_enabled(ctx, b);

curl-impersonate: Enable TLS extension permutation, enabled by default:

    SSL_CTX_set_permute_extensions(ssl_ctx, true);

and also chrome sends these in order X25519, secp256r1, secp384r1 so i did:

SSL_CTX_set1_groups_list(ssl_ctx, "X25519:P-256:P-384");

----------------------------------------------------------------------------------

patching handshake_client.c (boring ssl code):

replacing: This:

// Add TLS 1.3 ciphers. Order ChaCha20-Poly1305 relative to AES-GCM based on
// hardware support.
if (hs->max_version >= TLS1_3_VERSION) {
    static const uint16_t kCiphersNoAESHardware[] = { ... };
    static const uint16_t kCiphersAESHardware[] = { ... };
    ...
}

TO:

// Add Chrome-style fixed cipher suite order (TLS 1.3 + TLS 1.2)
static const uint16_t kChromeCiphers[] = {
    // TLS 1.3
    TLS1_3_CK_AES_128_GCM_SHA256 & 0xffff,
    TLS1_3_CK_AES_256_GCM_SHA384 & 0xffff,
    TLS1_3_CK_CHACHA20_POLY1305_SHA256 & 0xffff,

    // TLS 1.2
    TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
    TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
    TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,
    TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,
    TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,
    TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,
    TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,
    TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,
    TLS_RSA_WITH_AES_128_GCM_SHA256,
    TLS_RSA_WITH_AES_256_GCM_SHA384,
    TLS_RSA_WITH_AES_128_CBC_SHA,
    TLS_RSA_WITH_AES_256_CBC_SHA,
};

for (size_t i = 0; i < OPENSSL_ARRAY_SIZE(kChromeCiphers); i++) {
    if (!CBB_add_u16(&child, kChromeCiphers[i])) {
        return false;
    }
}

replacing: This:

if (hs->min_version < TLS1_3_VERSION && type != ssl_client_hello_inner) {
    bool any_enabled = false;
    for (const SSL_CIPHER *cipher : SSL_get_ciphers(ssl)) {
        ...
    }
    ...
}

TO:

if (hs->min_version < TLS1_3_VERSION && type != ssl_client_hello_inner) {
    static const uint16_t kChromeTLS12Ciphers[] = {
        0xC02B, // TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
        0xC02F, // TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
        0xC02C, // TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
        0xC030, // TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
        0xCCA9, // TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
        0xCCA8, // TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
        0xC013, // TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
        0xC014, // TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
        0x009C, // TLS_RSA_WITH_AES_128_GCM_SHA256
        0x009D, // TLS_RSA_WITH_AES_256_GCM_SHA384
        0x002F, // TLS_RSA_WITH_AES_128_CBC_SHA
        0x0035, // TLS_RSA_WITH_AES_256_CBC_SHA
    };

    for (size_t i = 0; i < OPENSSL_ARRAY_SIZE(kChromeTLS12Ciphers); i++) {
        if (!CBB_add_u16(&child, kChromeTLS12Ciphers[i])) {
            return false;
        }
    }
}



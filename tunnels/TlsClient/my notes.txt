

First , there is a full caputred client hello from my just updated chrome Version 138.0.7204.184 (Official Build) (64-bit)

Frame 3902: 1766 bytes on wire (14128 bits), 1766 bytes captured (14128 bits) on interface \Device\NPF_{6A460D48-FB76-6C3F-A47D-EF97D3DC6B0E}, id 0
Raw packet data
Internet Protocol Version 4, Src: 172.19.0.1, Dst: 185.15.59.224
Transmission Control Protocol, Src Port: 8310, Dst Port: 443, Seq: 1, Ack: 1, Len: 1726
Transport Layer Security
    TLSv1.3 Record Layer: Handshake Protocol: Client Hello
        Content Type: Handshake (22)
        Version: TLS 1.0 (0x0301)
        Length: 1721
        Handshake Protocol: Client Hello
            Handshake Type: Client Hello (1)
            Length: 1717
            Version: TLS 1.2 (0x0303)
            Random: dbf3281c2a4951e4e4607f5cdf8c1eb49cc632ef74928e53aeedec5cd7890388
            Session ID Length: 32
            Session ID: 31a424381db729ced569acfcc4684215e6115b4ef43867069df434324d511cb9
            Cipher Suites Length: 32
            Cipher Suites (16 suites)
            Compression Methods Length: 1
            Compression Methods (1 method)
            Extensions Length: 1612
            Extension: Reserved (GREASE) (len=0)
                Type: Reserved (GREASE) (64250)
                Length: 0
                Data: <MISSING>
            Extension: supported_groups (len=12)
                Type: supported_groups (10)
                Length: 12
                Supported Groups List Length: 10
                Supported Groups (5 groups)
            Extension: session_ticket (len=0)
                Type: session_ticket (35)
                Length: 0
                Session Ticket: <MISSING>
            Extension: encrypted_client_hello (len=186)
                Type: encrypted_client_hello (65037)
                Length: 186
                Client Hello type: Outer Client Hello (0)
                Cipher Suite: HKDF-SHA256/AES-128-GCM
                Config Id: 214
                Enc length: 32
                Enc: 51145af2de233fb818bf846203dfab16080eea334bdea52911ad3d5603bee019
                Payload length: 144
                Payload [â€¦]: f97612a159ddd74f2705be91b8e5e176c925d0d9d5337d308ee5e41425a25cc86c2eefd5959f5a3c9dca3a7a4f29bdab3e3e32454c2ddfba4702e69b20b41074c18293c1fcbb759e9a3c306ba5cc46d3bc192b92ac48b80c453d58150fc4cc74c528a5c316ab05af7e0d43e0dd51c90e
            Extension: key_share (len=1263) X25519MLKEM768, x25519
                Type: key_share (51)
                Length: 1263
                Key Share extension
            Extension: supported_versions (len=7) TLS 1.3, TLS 1.2
                Type: supported_versions (43)
                Length: 7
                Supported Versions length: 6
                Supported Version: Reserved (GREASE) (0xaaaa)
                Supported Version: TLS 1.3 (0x0304)
                Supported Version: TLS 1.2 (0x0303)
            Extension: signature_algorithms (len=18)
                Type: signature_algorithms (13)
                Length: 18
                Signature Hash Algorithms Length: 16
                Signature Hash Algorithms (8 algorithms)
            Extension: ec_point_formats (len=2)
                Type: ec_point_formats (11)
                Length: 2
                EC point formats Length: 1
                Elliptic curves point formats (1)
            Extension: signed_certificate_timestamp (len=0)
                Type: signed_certificate_timestamp (18)
                Length: 0
            Extension: application_layer_protocol_negotiation (len=14)
                Type: application_layer_protocol_negotiation (16)
                Length: 14
                ALPN Extension Length: 12
                ALPN Protocol
                    ALPN string length: 2
                    ALPN Next Protocol: h2
                    ALPN string length: 8
                    ALPN Next Protocol: http/1.1
            Extension: status_request (len=5)
                Type: status_request (5)
                Length: 5
                Certificate Status Type: OCSP (1)
                Responder ID list Length: 0
                Request Extensions Length: 0
            Extension: extended_master_secret (len=0)
                Type: extended_master_secret (23)
                Length: 0
            Extension: server_name (len=21) name=en.wikipedia.org
                Type: server_name (0)
                Length: 21
                Server Name Indication extension
            Extension: Unknown type 17613 (len=5)
                Type: Unknown (17613)
                Length: 5
                Data: 0003026832
            Extension: compress_certificate (len=3)
                Type: compress_certificate (27)
                Length: 3
                Algorithms Length: 2
                Algorithm: brotli (2)
            Extension: renegotiation_info (len=1)
                Type: renegotiation_info (65281)
                Length: 1
                Renegotiation Info extension
            Extension: psk_key_exchange_modes (len=2)
                Type: psk_key_exchange_modes (45)
                Length: 2
                PSK Key Exchange Modes Length: 1
                PSK Key Exchange Mode: PSK with (EC)DHE key establishment (psk_dhe_ke) (1)
            Extension: Reserved (GREASE) (len=1)
                Type: Reserved (GREASE) (56026)
                Length: 1
                Data: 00
            [JA4: t13d1516h2_8daaf6152771_d8a2da3f94cd]
            [JA4_r: t13d1516h2_002f,0035,009c,009d,1301,1302,1303,c013,c014,c02b,c02c,c02f,c030,cca8,cca9_0005,000a,000b,000d,0012,0017,001b,0023,002b,002d,0033,44cd,fe0d,ff01_0403,0804,0401,0503,0805,0501,0806,0601]
            [JA3 Fullstring: 771,4865-4866-4867-49195-49199-49196-49200-52393-52392-49171-49172-156-157-47-53,10-35-65037-51-43-13-11-18-16-5-23-0-17613-27-65281-45,4588-29-23-24,0]
            [JA3: 6844c3547eef7f056f17ce9fe357c909]



comparing with curl impersonate latest chrome path:

Cipher Suite: Reserved (GREASE) (0xeaea)
Cipher Suite: TLS_AES_128_GCM_SHA256 (0x1301)                         TLS_AES_128_GCM_SHA256
Cipher Suite: TLS_AES_256_GCM_SHA384 (0x1302)                         TLS_AES_256_GCM_SHA384
Cipher Suite: TLS_CHACHA20_POLY1305_SHA256 (0x1303)                   TLS_CHACHA20_POLY1305_SHA256
Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 (0xc02b)        ECDHE-ECDSA-AES128-GCM-SHA256
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 (0xc02f)          ECDHE-RSA-AES128-GCM-SHA256     
Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 (0xc02c)        ECDHE-ECDSA-AES256-GCM-SHA384
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (0xc030)          ECDHE-RSA-AES256-GCM-SHA384
Cipher Suite: TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 (0xcca9)  ECDHE-ECDSA-CHACHA20-POLY1305
Cipher Suite: TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 (0xcca8)    ECDHE-RSA-CHACHA20-POLY1305
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA (0xc013)             ECDHE-RSA-AES128-SHA
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA (0xc014)             ECDHE-RSA-AES256-SHA
Cipher Suite: TLS_RSA_WITH_AES_128_GCM_SHA256 (0x009c)                AES128-GCM-SHA256
Cipher Suite: TLS_RSA_WITH_AES_256_GCM_SHA384 (0x009d)                AES256-GCM-SHA384
Cipher Suite: TLS_RSA_WITH_AES_128_CBC_SHA (0x002f)                   AES128-SHA
Cipher Suite: TLS_RSA_WITH_AES_256_CBC_SHA (0x0035)                   AES256-SHA 


notes for create.c:

i first corrected setting a harded ALPN 

 static const uint8_t alpn_protos[] = {
        2, 'h', '2',
        8, 'h','t','t','p','/','1','.','1'
    };

and then:

SSL_CTX_set_min_proto_version(ssl_ctx, TLS1_2_VERSION);
SSL_CTX_set_max_proto_version(ssl_ctx, TLS1_3_VERSION);

then grease:

SSL_CTX_set_grease_enabled(ctx, b);

curl-impersonate: Enable TLS extension permutation, enabled by default:

    SSL_CTX_set_permute_extensions(ssl_ctx, true);

and also chrome sends these in order X25519, secp256r1, secp384r1 so i did:

SSL_CTX_set1_groups_list(ssl_ctx, "X25519:P-256:P-384");

----------------------------------------------------------------------------------

patching handshake_client.c (boring ssl code):

replacing: This:

// Add TLS 1.3 ciphers. Order ChaCha20-Poly1305 relative to AES-GCM based on
// hardware support.
if (hs->max_version >= TLS1_3_VERSION) {
    static const uint16_t kCiphersNoAESHardware[] = { ... };
    static const uint16_t kCiphersAESHardware[] = { ... };
    ...
}

TO:

// Add Chrome-style fixed cipher suite order (TLS 1.3 + TLS 1.2)
static const uint16_t kChromeCiphers[] = {
    // TLS 1.3
    TLS1_3_CK_AES_128_GCM_SHA256 & 0xffff,
    TLS1_3_CK_AES_256_GCM_SHA384 & 0xffff,
    TLS1_3_CK_CHACHA20_POLY1305_SHA256 & 0xffff,

    // TLS 1.2
    TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
    TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
    TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,
    TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,
    TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,
    TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,
    TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,
    TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,
    TLS_RSA_WITH_AES_128_GCM_SHA256,
    TLS_RSA_WITH_AES_256_GCM_SHA384,
    TLS_RSA_WITH_AES_128_CBC_SHA,
    TLS_RSA_WITH_AES_256_CBC_SHA,
};

for (size_t i = 0; i < OPENSSL_ARRAY_SIZE(kChromeCiphers); i++) {
    if (!CBB_add_u16(&child, kChromeCiphers[i])) {
        return false;
    }
}

replacing: This:

if (hs->min_version < TLS1_3_VERSION && type != ssl_client_hello_inner) {
    bool any_enabled = false;
    for (const SSL_CIPHER *cipher : SSL_get_ciphers(ssl)) {
        ...
    }
    ...
}

TO:

if (hs->min_version < TLS1_3_VERSION && type != ssl_client_hello_inner) {
    static const uint16_t kChromeTLS12Ciphers[] = {
        0xC02B, // TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
        0xC02F, // TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
        0xC02C, // TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
        0xC030, // TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
        0xCCA9, // TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
        0xCCA8, // TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
        0xC013, // TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
        0xC014, // TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
        0x009C, // TLS_RSA_WITH_AES_128_GCM_SHA256
        0x009D, // TLS_RSA_WITH_AES_256_GCM_SHA384
        0x002F, // TLS_RSA_WITH_AES_128_CBC_SHA
        0x0035, // TLS_RSA_WITH_AES_256_CBC_SHA
    };

    for (size_t i = 0; i < OPENSSL_ARRAY_SIZE(kChromeTLS12Ciphers); i++) {
        if (!CBB_add_u16(&child, kChromeTLS12Ciphers[i])) {
            return false;
        }
    }
}

------------------------------------------------------------------------------

adding brotli: chrome dose use brotli only for decompression of cert so i will bring  v1.0.9 of brotli same as chrome

+ adding  commmon/decompress_brotli.cc and added to tlsclient cmake

finally adding:

    SSL_CTX_add_cert_compression_alg(ssl_ctx, TLSEXT_cert_compression_brotli, NULL /* compression not supported (same as chrome)*/,
                                     tlsclientDecompressBrotliCert);


---------------------------------------------------------------------

now its ALPS time , i used wireshark and chrome used same alps everytime i could see so i can use this value for sure

also asked claude sonnet and it corfirmed its ok

so i added this code in linestate creation of tls client:


    // ALPS settings for HTTP/2 (matches Chrome's 0x026832)
    static const uint8_t h2_alps_settings[] = {0x02, 0x68, 0x32};

    // ALPS settings for HTTP/1.1 (typically empty for HTTP/1.1)
    static const uint8_t h1_alps_settings[] = {};

    // Add ALPS for h2
    if (SSL_add_application_settings(ls->ssl, (const uint8_t *) "h2", 2, h2_alps_settings, sizeof(h2_alps_settings)) !=
        1)
    {
        LOGF("Failed to add ALPS for HTTP/2   (part of matching Chrome)");
        SSL_free(ls->ssl);
        BIO_free(ls->rbio);
        BIO_free(ls->wbio);
        bufferqueueDestroy(&(ls->bq));
        memorySet(ls, 0, sizeof(tlsclient_lstate_t));
        terminateProgram(1);
        return;
    }

    // Add ALPS for http/1.1
    if (SSL_add_application_settings(ls->ssl, (const uint8_t *) "http/1.1", 8, h1_alps_settings,
                                     sizeof(h1_alps_settings)) != 1)
    {
        LOGF("Failed to add ALPS for HTTP/1   (part of matching Chrome)");
        SSL_free(ls->ssl);
        BIO_free(ls->rbio);
        BIO_free(ls->wbio);
        bufferqueueDestroy(&(ls->bq));
        memorySet(ls, 0, sizeof(tlsclient_lstate_t));
        terminateProgram(1);
        return;
    }
-------------------------------------------------------------------------

after more looking at the frame, i added this extensions to line state part of tls client


    // Enable ECH GREASE to match Chrome's behavior
    // This sends a fake ECH extension to prevent fingerprinting
    SSL_set_enable_ech_grease(ls->ssl, 1);

    // Configure additional Chrome-like extensions
    
    // Enable OCSP stapling (status_request extension)
    SSL_enable_ocsp_stapling(ls->ssl);
    
    // Enable Signed Certificate Timestamp extension
    SSL_enable_signed_cert_timestamps(ls->ssl);

---------------------------------------------

also enabled these in SSL_CTX creation:


    // Enable SCT (Signed Certificate Timestamp) extension at context level
    SSL_CTX_enable_signed_cert_timestamps(ssl_ctx);

    // Configure signature algorithms to match Chrome
    // Chrome uses these signature algorithms in this order
    if (! SSL_CTX_set1_sigalgs_list(ssl_ctx, 
        "ecdsa_secp256r1_sha256:"
        "rsa_pss_rsae_sha256:"
        "rsa_pkcs1_sha256:"
        "ecdsa_secp384r1_sha384:"
        "rsa_pss_rsae_sha384:"
        "rsa_pkcs1_sha384:"
        "rsa_pss_rsae_sha512:"
        "rsa_pkcs1_sha512"))
    {
        LOGF("TlsClient: (part of making SSL_CTX match chrome) Failed to set signature algorithms for SSL_CTX");
        SSL_CTX_free(ssl_ctx);
        return NULL;
    }

---------------------------------------------------------




ok , here is a packet that tls client made, and as we can see we got same ja4 
Frame 42272: 665 bytes on wire (5320 bits), 665 bytes captured (5320 bits) on interface \Device\NPF_{03432FFB-4389-408C-9CD5-B01120B44721}, id 0
Ethernet II, Src: Intel_69:82:91 (f8:94:c2:69:82:91), Dst: HuaweiTechno_ad:3b:28 (fc:ab:90:ad:3b:28)
Internet Protocol Version 4, Src: 192.168.1.100, Dst: 185.15.59.226
Transmission Control Protocol, Src Port: 37699, Dst Port: 443, Seq: 1, Ack: 1, Len: 611
Transport Layer Security
    TLSv1.3 Record Layer: Handshake Protocol: Client Hello
        Content Type: Handshake (22)
        Version: TLS 1.0 (0x0301)
        Length: 606
        Handshake Protocol: Client Hello
            Handshake Type: Client Hello (1)
            Length: 602
            Version: TLS 1.2 (0x0303)
            Random: e1c7d0640cc567269edfb4d5d45916d22089a7c257037bacb1b5eb83c4712c95
            Session ID Length: 32
            Session ID: d251ee3eb52ca5318f7d6ae4130d38eae18700c90ee352c214040061fc44abd5
            Cipher Suites Length: 32
            Cipher Suites (16 suites)
            Compression Methods Length: 1
            Compression Methods (1 method)
            Extensions Length: 497
            Extension: Reserved (GREASE) (len=0)
                Type: Reserved (GREASE) (2570)
                Length: 0
                Data: <MISSING>
            Extension: extended_master_secret (len=0)
                Type: extended_master_secret (23)
                Length: 0
            Extension: compress_certificate (len=3)
                Type: compress_certificate (27)
                Length: 3
                Algorithms Length: 2
                Algorithm: brotli (2)
            Extension: session_ticket (len=0)
                Type: session_ticket (35)
                Length: 0
                Session Ticket: <MISSING>
            Extension: ec_point_formats (len=2)
                Type: ec_point_formats (11)
                Length: 2
                EC point formats Length: 1
                Elliptic curves point formats (1)
            Extension: signature_algorithms (len=18)
                Type: signature_algorithms (13)
                Length: 18
                Signature Hash Algorithms Length: 16
                Signature Hash Algorithms (8 algorithms)
            Extension: supported_groups (len=12)
                Type: supported_groups (10)
                Length: 12
                Supported Groups List Length: 10
                Supported Groups (5 groups)
            Extension: application_layer_protocol_negotiation (len=14)
                Type: application_layer_protocol_negotiation (16)
                Length: 14
                ALPN Extension Length: 12
                ALPN Protocol
                    ALPN string length: 2
                    ALPN Next Protocol: h2
                    ALPN string length: 8
                    ALPN Next Protocol: http/1.1
            Extension: supported_versions (len=7) TLS 1.3, TLS 1.2
                Type: supported_versions (43)
                Length: 7
                Supported Versions length: 6
                Supported Version: Reserved (GREASE) (0x1a1a)
                Supported Version: TLS 1.3 (0x0304)
                Supported Version: TLS 1.2 (0x0303)
            Extension: psk_key_exchange_modes (len=2)
                Type: psk_key_exchange_modes (45)
                Length: 2
                PSK Key Exchange Modes Length: 1
                PSK Key Exchange Mode: PSK with (EC)DHE key establishment (psk_dhe_ke) (1)
            Extension: status_request (len=5)
                Type: status_request (5)
                Length: 5
                Certificate Status Type: OCSP (1)
                Responder ID list Length: 0
                Request Extensions Length: 0
            Extension: renegotiation_info (len=1)
                Type: renegotiation_info (65281)
                Length: 1
                Renegotiation Info extension
            Extension: server_name (len=21) name=en.wikipedia.com
                Type: server_name (0)
                Length: 21
                Server Name Indication extension
            Extension: Unknown type 17613 (len=14)
                Type: Unknown (17613)
                Length: 14
                Data: 000c02683208687474702f312e31
            Extension: key_share (len=43) x25519
                Type: key_share (51)
                Length: 43
                Key Share extension
            Extension: encrypted_client_hello (len=282)
                Type: encrypted_client_hello (65037)
                Length: 282
                Client Hello type: Outer Client Hello (0)
                Cipher Suite: HKDF-SHA256/AES-128-GCM
                Config Id: 27
                Enc length: 32
                Enc: c049f7059d7c0130b69a850abab9b01790a7c9c7c4547cb602d4a4ea315efe60
                Payload length: 240
                Payload [â€¦]: c327b2a714ca34982913bee0c448a75eb13cc6e4a8f88b7e04080625f7bee76ea1c488fdd6660efc3fa7812e108207e35fb4cfd987fe05cb2c40c80d955f3034087be5a1685c5ede8a2a2f8f50f504a79bb18c00afe03f55cadd309bc129781e8617a93b9c0ab733291580453e8d83d3
            Extension: signed_certificate_timestamp (len=0)
                Type: signed_certificate_timestamp (18)
                Length: 0
            Extension: Reserved (GREASE) (len=1)
                Type: Reserved (GREASE) (39578)
                Length: 1
                Data: 00
            [JA4: t13d1516h2_8daaf6152771_d8a2da3f94cd]
            [JA4_r: t13d1516h2_002f,0035,009c,009d,1301,1302,1303,c013,c014,c02b,c02c,c02f,c030,cca8,cca9_0005,000a,000b,000d,0012,0017,001b,0023,002b,002d,0033,44cd,fe0d,ff01_0403,0804,0401,0503,0805,0501,0806,0601]
            [JA3 Fullstring: 771,4865-4866-4867-49195-49199-49196-49200-52393-52392-49171-49172-156-157-47-53,23-27-35-11-13-10-16-43-45-5-65281-0-17613-51-65037-18,29-23-24-25,0]
            [JA3: a9fea9014897e0a991a2eb16a296f5db]

but ja3 didnt match and its correct, the reason is (copied from internet):

JA3 is a TLS fingerprinting method that generates a hash based on specific fields in the ClientHello message of a TLS handshake. These fields include the TLS version, cipher suites, extensions, elliptic curves, and elliptic curve point formats. Importantly, JA3 takes into account the order of these extensions, meaning that if the order changes, the JA3 fingerprint changes too.
JA4 is a newer, more robust fingerprinting method designed to handle modern TLS implementations, like TLS 1.3 and QUIC. Unlike JA3, JA4 is built to be resistant to changes in extension order and focuses on consistent characteristics of the client, such as the protocol, version, Server Name Indication (SNI), cipher suites, extensions, and Application-Layer Protocol Negotiation (ALPN).

Your goal is to mimic Google Chromeâ€™s handshake signature, likely to avoid detection or ensure compatibility by making your client look like a standard Chrome browser. Hereâ€™s my take:Matching JA4: This is good. It shows that your program accurately reflects Chromeâ€™s TLS implementation in the ways that matter most for modern fingerprinting. JA4 is the more reliable and future-proof method, especially as TLS evolves with features like TLS 1.3 and QUIC.
Not Matching JA3: This is not badâ€”itâ€™s correct and expected. Since Chrome randomizes extension order, its JA3 fingerprint varies with each connection. Your program doing the same means it behaves like Chrome, producing a different JA3 each time rather than a fixed one that could be tracked or flagged. Not matching the specific JA3 from your Wireshark capture just confirms that your randomization is working as intended.


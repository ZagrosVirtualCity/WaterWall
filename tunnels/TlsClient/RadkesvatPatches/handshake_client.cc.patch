--- handshake_client.cc.original	2025-07-31 23:48:53.722792700 +0330
+++ handshake_client.cc	2025-08-01 04:38:20.926701600 +0330
@@ -109,64 +109,43 @@
 
   // Add TLS 1.3 ciphers. Order ChaCha20-Poly1305 relative to AES-GCM based on
   // hardware support.
+  // Radkesvat : This is my patch to add TLS 1.3 ciphers like chrome impersonate
   if (hs->max_version >= TLS1_3_VERSION) {
-    static const uint16_t kCiphersNoAESHardware[] = {
-        TLS1_3_CK_CHACHA20_POLY1305_SHA256 & 0xffff,
-        TLS1_3_CK_AES_128_GCM_SHA256 & 0xffff,
-        TLS1_3_CK_AES_256_GCM_SHA384 & 0xffff,
-    };
-    static const uint16_t kCiphersAESHardware[] = {
+    static const uint16_t kChromeTLS13Ciphers[] = {
         TLS1_3_CK_AES_128_GCM_SHA256 & 0xffff,
         TLS1_3_CK_AES_256_GCM_SHA384 & 0xffff,
         TLS1_3_CK_CHACHA20_POLY1305_SHA256 & 0xffff,
     };
-    static const uint16_t kCiphersCNSA[] = {
-        TLS1_3_CK_AES_256_GCM_SHA384 & 0xffff,
-        TLS1_3_CK_AES_128_GCM_SHA256 & 0xffff,
-        TLS1_3_CK_CHACHA20_POLY1305_SHA256 & 0xffff,
-    };
-
-    const bool has_aes_hw = ssl->config->aes_hw_override
-                                ? ssl->config->aes_hw_override_value
-                                : EVP_has_aes_hardware();
-    const bssl::Span<const uint16_t> ciphers =
-        ssl->config->compliance_policy == ssl_compliance_policy_cnsa_202407
-            ? bssl::Span<const uint16_t>(kCiphersCNSA)
-            : (has_aes_hw ? bssl::Span<const uint16_t>(kCiphersAESHardware)
-                          : bssl::Span<const uint16_t>(kCiphersNoAESHardware));
 
-    for (auto cipher : ciphers) {
-      if (!ssl_add_tls13_cipher(&child, cipher,
-                                ssl->config->compliance_policy)) {
-        return false;
-      }
+    for (size_t i = 0; i < OPENSSL_ARRAY_SIZE(kChromeTLS13Ciphers); i++) {
+        if (!ssl_add_tls13_cipher(&child, kChromeTLS13Ciphers[i], ssl_compliance_policy_none)) {
+            return false;
+        }
     }
   }
-
+  // Radkesvat : This is my patch 2 
   if (hs->min_version < TLS1_3_VERSION && type != ssl_client_hello_inner) {
-    bool any_enabled = false;
-    for (const SSL_CIPHER *cipher : SSL_get_ciphers(ssl)) {
-      // Skip disabled ciphers
-      if ((cipher->algorithm_mkey & mask_k) ||
-          (cipher->algorithm_auth & mask_a)) {
-        continue;
-      }
-      if (SSL_CIPHER_get_min_version(cipher) > hs->max_version ||
-          SSL_CIPHER_get_max_version(cipher) < hs->min_version) {
-        continue;
-      }
-      any_enabled = true;
-      if (!CBB_add_u16(&child, SSL_CIPHER_get_protocol_id(cipher))) {
-        return false;
-      }
-    }
+    static const uint16_t kChromeTLS12Ciphers[] = {
+        0xC02B, // TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
+        0xC02F, // TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
+        0xC02C, // TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
+        0xC030, // TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
+        0xCCA9, // TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
+        0xCCA8, // TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
+        0xC013, // TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
+        0xC014, // TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
+        0x009C, // TLS_RSA_WITH_AES_128_GCM_SHA256
+        0x009D, // TLS_RSA_WITH_AES_256_GCM_SHA384
+        0x002F, // TLS_RSA_WITH_AES_128_CBC_SHA
+        0x0035, // TLS_RSA_WITH_AES_256_CBC_SHA
+    };
 
-    // If all ciphers were disabled, return the error to the caller.
-    if (!any_enabled && hs->max_version < TLS1_3_VERSION) {
-      OPENSSL_PUT_ERROR(SSL, SSL_R_NO_CIPHERS_AVAILABLE);
-      return false;
+    for (size_t i = 0; i < OPENSSL_ARRAY_SIZE(kChromeTLS12Ciphers); i++) {
+        if (!CBB_add_u16(&child, kChromeTLS12Ciphers[i])) {
+            return false;
+        }
     }
-  }
+}
 
   if (ssl->mode & SSL_MODE_SEND_FALLBACK_SCSV) {
     if (!CBB_add_u16(&child, SSL3_CK_FALLBACK_SCSV & 0xffff)) {
